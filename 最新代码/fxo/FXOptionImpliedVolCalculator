import numpy as np
from scipy.stats import norm
from scipy.optimize import root_scalar


class FXOptionImpliedVolCalculator:
    def __init__(self, spot, strike, domestic_rate, foreign_rate, time_to_maturity, option_type='call'):
        self.spot = spot
        self.strike = strike
        self.domestic_rate = domestic_rate
        self.foreign_rate = foreign_rate
        self.time_to_maturity = time_to_maturity
        self.option_type = option_type

    def option_price(self, volatility):
        """
        Calculate the option price using Garman-Kohlhagen model for a given volatility.
        """
        d1 = (np.log(self.spot / self.strike) + (
                    self.domestic_rate - self.foreign_rate + 0.5 * volatility ** 2) * self.time_to_maturity) / (
                         volatility * np.sqrt(self.time_to_maturity))
        d2 = d1 - volatility * np.sqrt(self.time_to_maturity)

        if self.option_type == 'call':
            price = (self.spot * np.exp(-self.foreign_rate * self.time_to_maturity) * norm.cdf(d1) -
                     self.strike * np.exp(-self.domestic_rate * self.time_to_maturity) * norm.cdf(d2))
        elif self.option_type == 'put':
            price = (self.strike * np.exp(-self.domestic_rate * self.time_to_maturity) * norm.cdf(-d2) -
                     self.spot * np.exp(-self.foreign_rate * self.time_to_maturity) * norm.cdf(-d1))
        else:
            raise ValueError("Invalid option type. Use 'call' or 'put'.")

        return price

    def find_implied_volatility(self, market_price):
        """
        Find the implied volatility that matches the market price using the bisection method.
        """

        def objective_function(volatility):
            return self.option_price(volatility) - market_price

        # Set a reasonable range for FX implied volatilities
        result = root_scalar(objective_function, bracket=[0.001, 1.0], method='bisect')

        if result.converged:
            return result.root
        else:
            raise ValueError("Could not find implied volatility.")


# Example usage
if __name__ == "__main__":
    # Define option parameters
    calculator = FXOptionImpliedVolCalculator(
        strike=7.7500,
        spot=7.12000,
        domestic_rate=0.0192927,
        foreign_rate=0.0503185,
        time_to_maturity=1,  # Time in years
        option_type='call'
    )

    # Target market price for the option
    market_price = 0.05

    # Calculate implied volatility
    implied_vol = calculator.find_implied_volatility(market_price)
    print(f"The implied volatility for the given option is: {implied_vol:.4%}")
